From 8fe68fe9b30d1da027281b5468492aa45ca0b052 Mon Sep 17 00:00:00 2001
From: James Feist <james.feist@linux.intel.com>
Date: Wed, 31 Jul 2019 16:01:49 -0700
Subject: [PATCH] Reboot into UBOOT on Watchdog Failures

We use watchdog1 to reboot when there is a watchdog
error. Reboot into u-boot as we are using that as
safe mode.

Tested: watchdog -T 0 -F /dev/watchdog1 reboots into
uboot after 3 times

Signed-off-by: James Feist <james.feist@linux.intel.com>
---
 .../include/asm/arch-aspeed/ast-g5-intel.h    |  1 +
 board/aspeed/ast-g5/ast-g5-intel.c            | 29 +++++++++++++++++++
 common/autoboot.c                             |  5 ++++
 3 files changed, 35 insertions(+)

diff --git a/arch/arm/include/asm/arch-aspeed/ast-g5-intel.h b/arch/arm/include/asm/arch-aspeed/ast-g5-intel.h
index a88521a1b3c7..64f4ed17bfd5 100644
--- a/arch/arm/include/asm/arch-aspeed/ast-g5-intel.h
+++ b/arch/arm/include/asm/arch-aspeed/ast-g5-intel.h
@@ -14,6 +14,7 @@
 
 #ifndef __ASSEMBLY__
 int intel_force_firmware_jumper_enabled(void);
+int intel_failed_boot(void);
 void start_fw_update_loop(void);
 #endif
 
diff --git a/board/aspeed/ast-g5/ast-g5-intel.c b/board/aspeed/ast-g5/ast-g5-intel.c
index 5196a1a41299..6b8395754f00 100644
--- a/board/aspeed/ast-g5/ast-g5-intel.c
+++ b/board/aspeed/ast-g5/ast-g5-intel.c
@@ -114,7 +114,23 @@ static const GPIOValue gpio_table[] = {
 #define HOST_SERIAL_A_HIGH_SPEED (1 << 0)
 #define HOST_SERIAL_B_HIGH_SPEED (1 << 1)
 
+#define WATCHDOG_RESET_BIT BIT(3)
 #define POWERON_RESET_BIT BIT(0)
+#define BOOT_FAILURE_LIMIT 0x3
+
+static int get_boot_failures(void)
+{
+	return getenv_ulong("bootfailures", 10, 0);
+}
+
+static void set_boot_failures(u32 count)
+{
+	if (count > BOOT_FAILURE_LIMIT)
+		return;
+
+	setenv_ulong("bootfailures", count);
+	saveenv();
+}
 
 static void sgpio_init(void)
 {
@@ -277,6 +293,11 @@ int intel_force_firmware_jumper_enabled(void)
 	return gpio_get_value(GPIO_FF_UPD_JUMPER);
 }
 
+int intel_failed_boot(void)
+{
+	return get_boot_failures() >= BOOT_FAILURE_LIMIT;
+}
+
 void arch_preboot_os(void)
 {
 	// last second before booting... set the LEDs
@@ -452,6 +473,7 @@ void ast_g5_intel_late_init(void)
 {
 	char value[32];
 	u32 reset_reason = 0;
+	u32 boot_failures = 0;
 
 	/* By default host serail A and B use normal speed */
 	uint32_t host_serial_cfg = 0;
@@ -496,6 +518,13 @@ void ast_g5_intel_late_init(void)
 
 	update_bootargs_cmd("resetreason", value);
 
+	boot_failures = get_boot_failures();
+
+	if (reset_reason & WATCHDOG_RESET_BIT)
+		set_boot_failures(boot_failures + 1);
+	else
+		set_boot_failures(0);
+
 	/* Update the special mode in bootargs */
 	if (reset_reason & POWERON_RESET_BIT && is_mfg_mode_phy_req())
 		update_bootargs_cmd("special", "mfg");
diff --git a/common/autoboot.c b/common/autoboot.c
index 393738ce0f4c..35dad222ff7c 100644
--- a/common/autoboot.c
+++ b/common/autoboot.c
@@ -271,6 +271,11 @@ static int abortboot(int bootdelay)
 		abort = 1;
 		goto exit;
 	}
+
+	if (intel_failed_boot()) {
+		abort = 1;
+		goto exit;
+	}
 # endif
 
 	if (bootdelay >= 0)
-- 
2.17.1

